// PEG grammar

{ log.innerText = '' }

FORTH "metacompiler" = (
  _ / comment  /* drop */
  / c:colondef { cdef(c) }
  / ';'  	   { endef() }
  / n:number   { doit(n) }
  / w:wordname { doit(w) }
) *

comment =
    [#\\][^\n]*   // line
  / '(' [^)]* ')' // block

_ "drop spaces" = [ \t\r\n]+

colondef =
	':' _ w:wordname { return w }

wordname = w:[^ \t\r\n]+
  { return new MSym(join(w)) }

S = [\+\-]? // sign
N = [0-9]+  // number

number =
    pfx:'0x' hex:[0-9a-fA-F]+
    { return new MHex(pfx+join(hex)) }
  / pfx:'0b' bin:[01]+
    { return new MBin(pfx+join(bin)) }
  / int:(S N)
    flo:('.' N)?
    exp:([eE] S N)?
    {
    if (!flo && !exp)
      return new MInt(join(int))
    else
      return new MNum(
        join(int)+join(flo)+join(exp))
    }

  